name: CSB DevSecOps CI Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily security scan

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-pre-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # Secret scanning with TruffleHog
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    # Semgrep security scanning
    - name: Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/php
          p/javascript
          p/python
          p/csharp
          .semgrep/csb-custom-rules.yml
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  build-and-test:
    needs: security-pre-check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [python-api, node-api, csharp-api, php-web]
    
    steps:
    - uses: actions/checkout@v4
    
    # Set up application-specific environment
    - name: Setup Python
      if: matrix.app == 'python-api'
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Setup Node.js
      if: matrix.app == 'node-api'
      uses: actions/setup-node@v4
      with:
        node-version: '16'
    
    - name: Setup .NET
      if: matrix.app == 'csharp-api'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    
    - name: Setup PHP
      if: matrix.app == 'php-web'
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'
    
    # Dependency scanning with Snyk
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --fail-on=all
        command: test
    
    # Build and test applications
    - name: Build and Test
      run: |
        cd apps/${{ matrix.app }}
        case "${{ matrix.app }}" in
          "python-api")
            pip install -r requirements.txt
            python -m pytest tests/ --cov=.
            ;;
          "node-api")
            npm ci
            npm test
            npm audit --audit-level high
            ;;
          "csharp-api")
            dotnet restore
            dotnet build --configuration Release
            dotnet test --configuration Release --collect:"XPlat Code Coverage"
            ;;
          "php-web")
            composer install
            ./vendor/bin/phpunit tests/
            ;;
        esac
    
    # Container security scanning
    - name: Build Docker image
      run: |
        cd apps/${{ matrix.app }}
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}:${{ github.sha }} .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python', 'csharp' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  dast-scan:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Start test applications
      run: |
        docker-compose up -d
        sleep 30  # Wait for applications to start
    
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.12.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: 'security/zap/baseline.conf'
        cmd_options: '-a -j -m 10 -T 60'
    
    - name: OWASP ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.10.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: 'security/zap/full-scan.conf'
        cmd_options: '-a'