# .github/workflows/ci.yml
# Enhanced CSB DevSecOps CI Pipeline with SonarQube Integration

name: CSB DevSecOps CI Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily security scan

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SONAR_HOST_URL: https://sonarcloud.io
  SONAR_PROJECT_KEY: csb-devsecops-test

jobs:
  security-pre-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # Secret scanning with TruffleHog
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    # Semgrep security scanning
    - name: Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/php
          p/javascript
          p/python
          p/csharp
          .semgrep/csb-custom-rules.yml
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  sonarqube-analysis:
    runs-on: ubuntu-latest
    needs: security-pre-check
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Cache SonarQube packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    # Build Java application for better analysis
    - name: Build Java Application
      run: |
        if [ -d "backend/java-springboot" ]; then
          cd backend/java-springboot
          echo "üìÅ Found Java Spring Boot directory"
          
          if [ -f "mvnw" ]; then
            echo "üî® Building with Maven wrapper..."
            chmod +x mvnw
            ./mvnw clean compile test-compile -DskipTests || echo "‚ö†Ô∏è Maven build completed with warnings"
          elif [ -f "pom.xml" ]; then
            echo "üî® Building with system Maven..."
            mvn clean compile test-compile -DskipTests || echo "‚ö†Ô∏è Maven build completed with warnings"
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "üî® Building with Gradle..."
            if [ -f "gradlew" ]; then
              chmod +x gradlew
              ./gradlew build -x test || echo "‚ö†Ô∏è Gradle build completed with warnings"
            else
              gradle build -x test || echo "‚ö†Ô∏è Gradle build completed with warnings"
            fi
          else
            echo "‚ö†Ô∏è No recognized build file found (pom.xml, build.gradle, or build.gradle.kts)"
            echo "üìù Listing directory contents:"
            ls -la
          fi
          cd ../../
        else
          echo "üìÅ Java Spring Boot directory not found, skipping Java build"
        fi
    
    # SonarQube Analysis using Docker
    - name: SonarQube Scan
      run: |
        # Create sonar-project.properties if it doesn't exist
        if [ ! -f "sonar-project.properties" ]; then
          echo "üìù Creating SonarQube configuration..."
          echo "sonar.projectKey=${{ env.SONAR_PROJECT_KEY }}" > sonar-project.properties
          echo "sonar.projectName=CSB DevSecOps Test Environment" >> sonar-project.properties
          echo "sonar.projectVersion=1.0" >> sonar-project.properties
          echo "sonar.sources=." >> sonar-project.properties
          echo "sonar.exclusions=node_modules/**,target/**,build/**,dist/**,*.log,security-reports/**" >> sonar-project.properties
          echo "sonar.host.url=${{ env.SONAR_HOST_URL }}" >> sonar-project.properties
          echo "sonar.token=${{ secrets.SONAR_TOKEN }}" >> sonar-project.properties
          echo "sonar.sourceEncoding=UTF-8" >> sonar-project.properties
        else
          echo "‚úÖ Found existing sonar-project.properties"
        fi
        
        echo "üîç Running SonarQube scanner using Docker..."
        # Run SonarQube scanner using Docker
        docker run --rm \
          -e SONAR_HOST_URL="${{ env.SONAR_HOST_URL }}" \
          -e SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}" \
          -v "$(pwd):/usr/src" \
          sonarsource/sonar-scanner-cli:latest || echo "‚ö†Ô∏è SonarQube scan completed with warnings"
    
    # Quality Gate Check using API
    - name: SonarQube Quality Gate Check
      run: |
        # Wait a bit for analysis to complete
        sleep 30
        
        # Check quality gate status
        QUALITY_GATE_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
          "${{ env.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{ env.SONAR_PROJECT_KEY }}" | \
          jq -r '.projectStatus.status')
        
        echo "Quality Gate Status: $QUALITY_GATE_STATUS"
        
        if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
          echo "‚ùå Quality gate failed"
          exit 1
        else
          echo "‚úÖ Quality gate passed"
        fi

  build-and-test:
    needs: [security-pre-check, sonarqube-analysis]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [python-api, node-api, csharp-api, php-web]
    
    steps:
    - uses: actions/checkout@v4
    
    # Set up application-specific environment
    - name: Setup Python
      if: matrix.app == 'python-api'
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Setup Node.js
      if: matrix.app == 'node-api'
      uses: actions/setup-node@v4
      with:
        node-version: '16'
    
    - name: Setup .NET
      if: matrix.app == 'csharp-api'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    
    - name: Setup PHP
      if: matrix.app == 'php-web'
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'
    
    # Dependency scanning with Snyk
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --fail-on=all
        command: test
    
    # Build and test applications
    - name: Build and Test
      run: |
        case "${{ matrix.app }}" in
          "python-api")
            if [ -d "backend/python-django" ]; then
              cd backend/python-django
              pip install -r requirements.txt
              python -m pytest tests/ --cov=. --cov-report=xml || true
              cd ../../
            fi
            ;;
          "node-api")
            if [ -d "backend/node-express" ]; then
              cd backend/node-express
              npm ci
              npm test || true
              npm audit --audit-level high || true
              cd ../../
            fi
            ;;
          "csharp-api")
            if [ -d "backend/csharp-webapi" ]; then
              cd backend/csharp-webapi
              dotnet restore
              dotnet build --configuration Release
              dotnet test --configuration Release --collect:"XPlat Code Coverage" || true
              cd ../../
            fi
            ;;
          "php-web")
            if [ -d "backend/php-drupal" ]; then
              cd backend/php-drupal
              composer install
              ./vendor/bin/phpunit tests/ || true
              cd ../../
            fi
            ;;
        esac
    
    # Container security scanning
    - name: Build Docker image
      run: |
        case "${{ matrix.app }}" in
          "python-api")
            if [ -d "backend/python-django" ]; then
              cd backend/python-django
              docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/python-api:${{ github.sha }} . || true
              cd ../../
            fi
            ;;
          "node-api")
            if [ -d "backend/node-express" ]; then
              cd backend/node-express
              docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/node-api:${{ github.sha }} . || true
              cd ../../
            fi
            ;;
          "csharp-api")
            if [ -d "backend/csharp-webapi" ]; then
              cd backend/csharp-webapi
              docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/csharp-api:${{ github.sha }} . || true
              cd ../../
            fi
            ;;
          "php-web")
            if [ -d "backend/php-drupal" ]; then
              cd backend/php-drupal
              docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/php-web:${{ github.sha }} . || true
              cd ../../
            fi
            ;;
        esac
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  codeql-analysis:
    runs-on: ubuntu-latest
    needs: security-pre-check
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python', 'csharp' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  dast-scan:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Start test applications
      run: |
        docker-compose up -d
        sleep 30  # Wait for applications to start
    
    # Start SonarQube as part of security suite
    - name: Start SonarQube Server
      run: |
        docker-compose --profile security up -d sonarqube
        # Wait for SonarQube to be ready
        timeout 300 bash -c 'until curl -f http://localhost:9000/api/system/status; do sleep 10; done'
    
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.12.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: 'security/zap/baseline.conf'
        cmd_options: '-a -j -m 10 -T 60'
    
    - name: OWASP ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.10.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: 'security/zap/full-scan.conf'
        cmd_options: '-a'
    
    # Additional SonarQube analysis with running services
    - name: SonarQube Analysis with Live Services
      run: |
        # Run SonarQube analysis against the running environment
        ./scripts/security/run-sonarqube-analysis.sh

  security-consolidation:
    runs-on: ubuntu-latest
    needs: [sonarqube-analysis, build-and-test, codeql-analysis, dast-scan]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all security artifacts
      uses: actions/download-artifact@v3
    
    - name: Consolidate Security Reports
      run: |
        mkdir -p security-reports/consolidated
        
        # Create master security summary
        echo "# CSB DevSecOps Security Analysis Report" > security-reports/consolidated/master-security-report.md
        echo "" >> security-reports/consolidated/master-security-report.md
        echo "**Generated:** $(date)" >> security-reports/consolidated/master-security-report.md
        echo "**Pipeline:** ${{ github.workflow }}" >> security-reports/consolidated/master-security-report.md
        echo "**Commit:** ${{ github.sha }}" >> security-reports/consolidated/master-security-report.md
        echo "**Branch:** ${{ github.ref_name }}" >> security-reports/consolidated/master-security-report.md
        echo "" >> security-reports/consolidated/master-security-report.md
        echo "## Executive Summary" >> security-reports/consolidated/master-security-report.md
        echo "" >> security-reports/consolidated/master-security-report.md
        echo "This report consolidates findings from all security tools in the CSB DevSecOps pipeline:" >> security-reports/consolidated/master-security-report.md
        echo "" >> security-reports/consolidated/master-security-report.md
        echo "### Security Tools Analysis" >> security-reports/consolidated/master-security-report.md
        echo "- **SonarQube**: Code quality and security vulnerabilities" >> security-reports/consolidated/master-security-report.md
        echo "- **CodeQL**: Static application security testing (SAST)" >> security-reports/consolidated/master-security-report.md
        echo "- **Semgrep**: Custom security rules and patterns" >> security-reports/consolidated/master-security-report.md
        echo "- **Snyk**: Dependency vulnerability scanning" >> security-reports/consolidated/master-security-report.md
        echo "- **Trivy**: Container vulnerability scanning" >> security-reports/consolidated/master-security-report.md
        echo "- **OWASP ZAP**: Dynamic application security testing (DAST)" >> security-reports/consolidated/master-security-report.md
        echo "- **TruffleHog**: Secret detection and verification" >> security-reports/consolidated/master-security-report.md
        echo "" >> security-reports/consolidated/master-security-report.md
        echo "## SonarQube Analysis Results" >> security-reports/consolidated/master-security-report.md
        echo "" >> security-reports/consolidated/master-security-report.md
        echo "**Status**: ${{ needs.sonarqube-analysis.result }}" >> security-reports/consolidated/master-security-report.md
        echo "" >> security-reports/consolidated/master-security-report.md
        echo "## Links and Resources" >> security-reports/consolidated/master-security-report.md
        echo "- [SonarQube Dashboard](https://sonarcloud.io/dashboard?id=csb-devsecops-test)" >> security-reports/consolidated/master-security-report.md
        echo "- [GitHub Security Tab](https://github.com/${{ github.repository }}/security)" >> security-reports/consolidated/master-security-report.md
        echo "- [Pipeline Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> security-reports/consolidated/master-security-report.md
    
    - name: Upload Consolidated Security Report
      uses: actions/upload-artifact@v3
      with:
        name: master-security-report
        path: security-reports/consolidated/
    
    - name: Security Gate Decision
      run: |
        # Implement comprehensive security gate logic
        echo "üîç Evaluating security gate criteria..."
        
        # Check SonarQube quality gate
        if [ "${{ needs.sonarqube-analysis.result }}" != "success" ]; then
          echo "‚ùå SonarQube quality gate failed"
          exit 1
        fi
        
        # Check build and test results
        if [ "${{ needs.build-and-test.result }}" != "success" ]; then
          echo "‚ùå Build and test phase failed"
          exit 1
        fi
        
        # Check CodeQL results
        if [ "${{ needs.codeql-analysis.result }}" != "success" ]; then
          echo "‚ùå CodeQL analysis failed"
          exit 1
        fi
        
        echo "‚úÖ All security gates passed - deployment approved"
    
    - name: Comment PR with Complete Security Analysis
      if: github.event_name == 'pull_request'
      uses: thollander/actions-comment-pull-request@v2
      with:
        comment_tag: security-analysis
        message: |
          ## üîí Complete Security Analysis Results
          
          ### Security Pipeline Status
          | Tool | Status | Result |
          |------|--------|--------|
          | üéØ SonarQube | ${{ needs.sonarqube-analysis.result == 'success' && '‚úÖ' || '‚ùå' }} | ${{ needs.sonarqube-analysis.result }} |
          | üîç CodeQL | ${{ needs.codeql-analysis.result == 'success' && '‚úÖ' || '‚ùå' }} | ${{ needs.codeql-analysis.result }} |
          | üèóÔ∏è Build & Test | ${{ needs.build-and-test.result == 'success' && '‚úÖ' || '‚ùå' }} | ${{ needs.build-and-test.result }} |
          | üï∑Ô∏è DAST Scan | ${{ needs.dast-scan.result == 'success' && '‚úÖ' || '‚ùå' }} | ${{ needs.dast-scan.result }} |
          
          ### Security Dashboard Links
          - üéØ [SonarQube Analysis](https://sonarcloud.io/dashboard?id=csb-devsecops-test)
          - üîç [GitHub Security Tab](https://github.com/${{ github.repository }}/security)
          - üìä [Detailed Security Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ### Next Steps
          1. Review any failed security checks above
          2. Address critical and high-severity findings
          3. Ensure all quality gates pass before merging
          
          **Security Gate:** ${{ needs.security-consolidation.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }}
          
          ---
          *Complete security analysis including SonarQube, CodeQL, SAST, DAST, and dependency scanning*