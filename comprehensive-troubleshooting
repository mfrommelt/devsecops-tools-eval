#!/bin/bash
# comprehensive-troubleshooting.sh - Advanced troubleshooting for CSB DevSecOps

set -e

echo "🔧 CSB DevSecOps Comprehensive Troubleshooting"
echo "=============================================="
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    case $status in
        "SUCCESS") echo -e "${GREEN}✅ $message${NC}" ;;
        "WARNING") echo -e "${YELLOW}⚠️  $message${NC}" ;;
        "ERROR") echo -e "${RED}❌ $message${NC}" ;;
        "INFO") echo -e "${BLUE}ℹ️  $message${NC}" ;;
        "STEP") echo -e "${PURPLE}🔍 $message${NC}" ;;
    esac
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to test network connectivity
test_connectivity() {
    local host=$1
    local port=$2
    local service_name=$3
    
    if timeout 5 bash -c "echo > /dev/tcp/$host/$port" 2>/dev/null; then
        print_status "SUCCESS" "$service_name ($host:$port) is reachable"
        return 0
    else
        print_status "ERROR" "$service_name ($host:$port) is not reachable"
        return 1
    fi
}

# Function to check service health
check_service_health() {
    local service=$1
    local url=$2
    local expected_status=${3:-200}
    
    if command_exists curl; then
        response=$(curl -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null || echo "000")
        if [ "$response" = "$expected_status" ]; then
            print_status "SUCCESS" "$service HTTP health check passed ($response)"
            return 0
        else
            print_status "ERROR" "$service HTTP health check failed (got $response, expected $expected_status)"
            return 1
        fi
    else
        print_status "WARNING" "curl not available for $service health check"
        return 1
    fi
}

print_status "STEP" "Starting comprehensive troubleshooting..."

# Step 1: System Information
echo ""
print_status "STEP" "Step 1: System Information"
echo "========================================="

print_status "INFO" "Operating System: $(uname -a)"
print_status "INFO" "Current User: $(whoami)"
print_status "INFO" "Working Directory: $(pwd)"

if [ -n "$CODESPACE_NAME" ]; then
    print_status "INFO" "Environment: GitHub Codespaces ($CODESPACE_NAME)"
    print_status "INFO" "Codespace URL: https://$CODESPACE_NAME.github.dev"
else
    print_status "INFO" "Environment: Local Development"
fi

# Check available resources
echo ""
print_status "INFO" "System Resources:"
echo "Memory:"
free -h | head -2
echo ""
echo "Disk Space:"
df -h / | head -2
echo ""
echo "CPU Info:"
nproc
echo ""

# Step 2: Required Tools Check
echo ""
print_status "STEP" "Step 2: Required Tools Verification"
echo "==========================================="

tools=(
    "docker:Docker"
    "docker-compose:Docker Compose"
    "git:Git"
    "curl:cURL"
    "jq:jq JSON processor"
    "node:Node.js"
    "npm:NPM"
    "python3:Python 3"
    "pip3:Python pip"
    "java:Java"
    "mvn:Maven"
    "php:PHP"
    "composer:Composer"
)

missing_tools=()
for tool_info in "${tools[@]}"; do
    tool=$(echo $tool_info | cut -d: -f1)
    name=$(echo $tool_info | cut -d: -f2)
    
    if command_exists "$tool"; then
        version=$($tool --version 2>/dev/null | head -1 || echo "installed")
        print_status "SUCCESS" "$name is installed ($version)"
    else
        print_status "ERROR" "$name is missing"
        missing_tools+=("$name")
    fi
done

if [ ${#missing_tools[@]} -gt 0 ]; then
    print_status "WARNING" "Missing tools: ${missing_tools[*]}"
    print_status "INFO" "Run: .devcontainer/setup.sh to install missing tools"
fi

# Step 3: Security Tools Check
echo ""
print_status "STEP" "Step 3: Security Tools Verification"
echo "=========================================="

security_tools=(
    "semgrep:Semgrep SAST"
    "trufflehog:TruffleHog Secret Detection"
    "snyk:Snyk Dependency Scanner"
    "trivy:Trivy Vulnerability Scanner"
    "tfsec:tfsec Terraform Scanner"
    "checkov:Checkov Infrastructure Scanner"
)

missing_security_tools=()
for tool_info in "${security_tools[@]}"; do
    tool=$(echo $tool_info | cut -d: -f1)
    name=$(echo $tool_info | cut -d: -f2)
    
    if command_exists "$tool"; then
        version=$($tool --version 2>/dev/null | head -1 || echo "installed")
        print_status "SUCCESS" "$name is available ($version)"
    else
        print_status "ERROR" "$name is missing"
        missing_security_tools+=("$name")
    fi
done

if [ ${#missing_security_tools[@]} -gt 0 ]; then
    print_status "WARNING" "Missing security tools: ${missing_security_tools[*]}"
    print_status "INFO" "Run: .devcontainer/setup.sh to install missing tools"
fi

# Step 4: Docker Environment Check
echo ""
print_status "STEP" "Step 4: Docker Environment Check"
echo "====================================="

if command_exists docker; then
    if docker info >/dev/null 2>&1; then
        print_status "SUCCESS" "Docker daemon is running"
        
        # Check Docker containers
        print_status "INFO" "Docker containers status:"
        docker-compose ps 2>/dev/null || print_status "WARNING" "docker-compose ps failed"
        
        # Check Docker networks
        print_status "INFO" "Docker networks:"
        docker network ls | grep csb || print_status "WARNING" "CSB network not found"
        
        # Check Docker volumes
        print_status "INFO" "Docker volumes:"
        docker volume ls | grep csb || print_status "WARNING" "CSB volumes not found"
        
    else
        print_status "ERROR" "Docker daemon is not running"
        print_status "INFO" "Try: sudo systemctl start docker"
    fi
else
    print_status "ERROR" "Docker is not installed"
fi

# Step 5: Network Connectivity Check
echo ""
print_status "STEP" "Step 5: Network Connectivity Check"
echo "======================================="

# Test database connectivity
print_status "INFO" "Testing database connectivity:"
test_connectivity "localhost" "5432" "PostgreSQL"
test_connectivity "localhost" "3306" "MySQL"
test_connectivity "localhost" "1521" "Oracle"

# Test application connectivity
print_status "INFO" "Testing application connectivity:"
services=(
    "localhost:3000:React App"
    "localhost:4200:Angular App"
    "localhost:8000:Django API"
    "localhost:5000:Flask API"
    "localhost:8080:Spring Boot API"
    "localhost:8090:.NET Core API"
    "localhost:3001:Node.js API"
    "localhost:8888:PHP/Drupal"
    "localhost:8081:Adminer"
    "localhost:9000:Security Dashboard"
)

for service_info in "${services[@]}"; do
    host_port=$(echo $service_info | cut -d: -f1,2)
    host=$(echo $host_port | cut -d: -f1)
    port=$(echo $host_port | cut -d: -f2)
    name=$(echo $service_info | cut -d: -f3)
    
    test_connectivity "$host" "$port" "$name"
done

# Step 6: Application Health Checks
echo ""
print_status "STEP" "Step 6: Application Health Checks"
echo "====================================="

health_endpoints=(
    "Spring Boot API:http://localhost:8080/api/health"
    "Django API:http://localhost:8000"
    "Flask API:http://localhost:5000"
    ".NET Core API:http://localhost:8090"
    "Node.js API:http://localhost:3001"
    "React App:http://localhost:3000"
    "Angular App:http://localhost:4200"
    "PHP/Drupal:http://localhost:8888"
    "Adminer:http://localhost:8081"
    "Security Dashboard:http://localhost:9000"
)

for endpoint_info in "${health_endpoints[@]}"; do
    name=$(echo $endpoint_info | cut -d: -f1)
    url=$(echo $endpoint_info | cut -d: -f2,3)
    
    check_service_health "$name" "$url"
done

# Step 7: Security Reports Check
echo ""
print_status "STEP" "Step 7: Security Reports Check"
echo "================================="

if [ -d "security-reports" ]; then
    print_status "SUCCESS" "Security reports directory exists"
    
    # Check for recent reports
    report_dirs=("semgrep" "trufflehog" "trivy" "snyk" "dataweave" "drupal" "zap")
    
    for dir in "${report_dirs[@]}"; do
        if [ -d "security-reports/$dir" ] && [ "$(ls -A security-reports/$dir 2>/dev/null)" ]; then
            file_count=$(ls -1 security-reports/$dir | wc -l)
            print_status "SUCCESS" "$dir reports available ($file_count files)"
        else
            print_status "WARNING" "$dir reports missing or empty"
        fi
    done
    
    # Check report freshness
    latest_report=$(find security-reports -name "*.json" -o -name "*.md" -o -name "*.sarif" | xargs ls -t 2>/dev/null | head -1)
    if [ -n "$latest_report" ]; then
        age=$(stat -c %Y "$latest_report" 2>/dev/null || echo 0)
        current=$(date +%s)
        hours_old=$(( (current - age) / 3600 ))
        
        if [ $hours_old -lt 1 ]; then
            print_status "SUCCESS" "Reports are recent (latest: $latest_report, ${hours_old}h old)"
        else
            print_status "WARNING" "Reports may be stale (latest: $latest_report, ${hours_old}h old)"
        fi
    else
        print_status "WARNING" "No report files found"
    fi
else
    print_status "ERROR" "Security reports directory missing"
    print_status "INFO" "Run security scans to create reports"
fi

# Step 8: GitHub Codespaces Specific Checks
if [ -n "$CODESPACE_NAME" ]; then
    echo ""
    print_status "STEP" "Step 8: GitHub Codespaces Specific Checks"
    echo "============================================="
    
    print_status "INFO" "Codespace Environment Variables:"
    env | grep -E "(CODESPACE|GITHUB)" | head -10
    
    # Check port forwarding
    print_status "INFO" "Expected forwarded URLs:"
    ports=(3000 4200 8000 5000 8080 8090 3001 8888 8081 9000)
    for port in "${ports[@]}"; do
        if [ -n "$GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN" ]; then
            url="https://${CODESPACE_NAME}-${port}.${GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN}/"
            print_status "INFO" "Port $port: $url"
        fi
    done
fi

# Step 9: Environment Variables Check
echo ""
print_status "STEP" "Step 9: Environment Variables Check"
echo "======================================"

# Check for required environment variables
env_vars=(
    "NODE_ENV:Node.js Environment"
    "FLASK_ENV:Flask Environment"
    "DJANGO_SETTINGS_MODULE:Django Settings"
    "ASPNETCORE_ENVIRONMENT:.NET Environment"
    "SPRING_PROFILES_ACTIVE:Spring Profiles"
)

print_status "INFO" "Application environment variables:"
for var_info in "${env_vars[@]}"; do
    var=$(echo $var_info | cut -d: -f1)
    name=$(echo $var_info | cut -d: -f2)
    
    value=${!var}
    if [ -n "$value" ]; then
        print_status "SUCCESS" "$name ($var): $value"
    else
        print_status "WARNING" "$name ($var): not set"
    fi
done

# Check for security tool tokens
print_status "INFO" "Security tool tokens:"
if [ -n "$SEMGREP_APP_TOKEN" ]; then
    print_status "SUCCESS" "SEMGREP_APP_TOKEN is set (${SEMGREP_APP_TOKEN:0:10}...)"
else
    print_status "WARNING" "SEMGREP_APP_TOKEN not set (enhanced Semgrep features unavailable)"
fi

if [ -n "$SNYK_TOKEN" ]; then
    print_status "SUCCESS" "SNYK_TOKEN is set (${SNYK_TOKEN:0:10}...)"
else
    print_status "WARNING" "SNYK_TOKEN not set (Snyk scanning unavailable)"
fi

# Step 10: Recommendations and Next Steps
echo ""
print_status "STEP" "Step 10: Recommendations and Next Steps"
echo "=========================================="

print_status "INFO" "Based on the troubleshooting results:"

# Generate recommendations based on findings
recommendations=()

if [ ${#missing_tools[@]} -gt 0 ]; then
    recommendations+=("Install missing tools: .devcontainer/setup.sh")
fi

if [ ${#missing_security_tools[@]} -gt 0 ]; then
    recommendations+=("Install security tools: pip3 install semgrep && npm install -g snyk")
fi

if ! docker info >/dev/null 2>&1; then
    recommendations+=("Start Docker daemon: sudo systemctl start docker")
fi

if [ ! -d "security-reports" ] || [ -z "$(ls -A security-reports 2>/dev/null)" ]; then
    recommendations+=("Run security scans: ./scripts/security/run-security-scans.sh")
fi

# Check if services are running
running_services=$(docker-compose ps --services --filter "status=running" 2>/dev/null | wc -l)
if [ "$running_services" -lt 5 ]; then
    recommendations+=("Start services: ./start-with-dependencies.sh")
fi

if [ ${#recommendations[@]} -gt 0 ]; then
    print_status "WARNING" "Recommended actions:"
    for i in "${!recommendations[@]}"; do
        echo "   $((i+1)). ${recommendations[$i]}"
    done
else
    print_status "SUCCESS" "Environment appears to be healthy!"
fi

echo ""
print_status "INFO" "Quick fix commands:"
echo "   🔧 Reinstall tools:     .devcontainer/setup.sh"
echo "   🚀 Restart services:    ./start-with-dependencies.sh"
echo "   🔍 Run security scans:  ./scripts/security/run-security-scans.sh"
echo "   ✅ Validate results:    ./scripts/security/validate-scan-results.sh"
echo "   🏥 Full diagnostics:    ./comprehensive-diagnostics.sh"
echo "   🚑 Recover services:    ./container-recovery.sh"

echo ""
print_status "INFO" "Support resources:"
echo "   📖 Documentation:       README.md"
echo "   🎫 Create issue:        GitHub Issues"
echo "   💬 Get help:            #devops-support Slack"

echo ""
print_status "SUCCESS" "Troubleshooting completed at $(date)"

# Exit with appropriate code
if [ ${#missing_tools[@]} -gt 0 ] || [ ${#missing_security_tools[@]} -gt 0 ] || [ "$running_services" -lt 5 ]; then
    print_status "WARNING" "Some issues found - see recommendations above"
    exit 1
else
    print_status "SUCCESS" "Environment is healthy!"
    exit 0
fi