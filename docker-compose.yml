# docker-compose.yml - Updated with SonarQube integration
version: '3.8'

networks:
  csb-test-network:
    driver: bridge

volumes:
  postgres_data:
  mysql_data:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:

services:
  # Frontend Applications
  react-app:
    build: 
      context: ./frontend/react-app
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8080/api
    networks:
      - csb-test-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  angular-app:
    build:
      context: ./frontend/angular-app
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    environment:
      - NODE_ENV=development
    networks:
      - csb-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Applications
  django-app:
    build:
      context: ./backend/python-django
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=csb_project.settings
      - DATABASE_URL=postgresql://postgres:hardcoded_spring_db_password_789@postgres:5432/csbdb
    networks:
      - csb-test-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3

  flask-api:
    build: 
      context: ./backend/python-flask
      dockerfile: Dockerfile
    container_name: flask-security-api
    ports:
      - "5000:5000"
    environment:
      - FLASK_DEBUG=true
      - FLASK_APP=app.py
      - PYTHONUNBUFFERED=1
    depends_on:
      - postgres
    networks:
      - csb-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  spring-boot-api:
    build:
      context: ./backend/java-springboot
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=development
      - DATABASE_URL=jdbc:postgresql://postgres:5432/springdb
    networks:
      - csb-test-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  dotnet-api:
    build:
      context: ./backend/csharp-webapi
      dockerfile: Dockerfile
    ports:
      - "8090:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=dotnetdb;Username=postgres;Password=hardcoded_spring_db_password_789
    networks:
      - csb-test-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  node-express:
    build:
      context: ./backend/node-express
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:hardcoded_spring_db_password_789@postgres:5432/nodedb
    networks:
      - csb-test-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  php-drupal:
    build:
      context: ./backend/php-drupal
      dockerfile: Dockerfile
    ports:
      - "8888:80"
    environment:
      - DRUPAL_ENV=development
      - MYSQL_HOST=mysql
      - MYSQL_DATABASE=drupal
      - MYSQL_USER=drupal
      - MYSQL_PASSWORD=drupal
    networks:
      - csb-test-network
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Databases
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: hardcoded_spring_db_password_789
      POSTGRES_MULTIPLE_DATABASES: csbdb,flaskdb,springdb,dotnetdb,nodedb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./databases/postgresql/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
    networks:
      - csb-test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: drupal
      MYSQL_USER: drupal
      MYSQL_PASSWORD: drupal
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - csb-test-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 10s
      timeout: 5s
      retries: 5

  # SonarQube Service
  sonarqube:
    image: sonarqube:community
    container_name: csb-sonarqube
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube
      - SONAR_JDBC_USERNAME=postgres
      - SONAR_JDBC_PASSWORD=hardcoded_spring_db_password_789
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - csb-test-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    mem_limit: 2g
    profiles:
      - security

  # Support Services
  adminer:
    image: adminer
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - csb-test-network
    depends_on:
      - postgres
      - mysql

  # Security Dashboard (existing)
  security-dashboard:
    image: nginx:alpine
    container_name: csb-security-dashboard
    ports:
      - "9001:80"
    volumes:
      - ./security/dashboard:/usr/share/nginx/html:ro
      - ./security/dashboard/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - csb-test-network
    profiles:
      - security
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3