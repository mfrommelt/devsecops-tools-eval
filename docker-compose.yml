services:
  # Frontend Applications
  react-app:
    build: 
      context: ./frontend/react-app
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8080/api
    networks:
      - csb-test-network
    depends_on:
      - postgres
      - mysql

  angular-app:
    build:
      context: ./frontend/angular-app
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    environment:
      - NODE_ENV=development
    networks:
      - csb-test-network

  # Backend Applications
  django-app:
    build:
      context: ./backend/python-django
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=csb_project.settings
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/csbdb
    networks:
      - csb-test-network
    depends_on:
      - postgres

  flask-api:
    build:
      context: ./backend/python-flask
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/flaskdb
    networks:
      - csb-test-network
    depends_on:
      - postgres

  spring-boot-api:
    build:
      context: ./backend/java-springboot
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=development
      - DATABASE_URL=jdbc:postgresql://postgres:5432/springdb
    networks:
      - csb-test-network
    depends_on:
      - postgres

  dotnet-api:
    build:
      context: ./backend/csharp-webapi
      dockerfile: Dockerfile
    ports:
      - "8090:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=dotnetdb;Username=postgres;Password=postgres
    networks:
      - csb-test-network
    depends_on:
      - postgres

  node-express:
    build:
      context: ./backend/node-express
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/nodedb
    networks:
      - csb-test-network
    depends_on:
      - postgres

  php-drupal:
    build:
      context: ./backend/php-drupal
      dockerfile: Dockerfile
    ports:
      - "8888:80"
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_DATABASE=drupal
      - MYSQL_USER=drupal
      - MYSQL_PASSWORD=drupal
    networks:
      - csb-test-network
    depends_on:
      - mysql

  # Databases
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: hardcoded_spring_db_password_789
      POSTGRES_MULTIPLE_DATABASES: csbdb,flaskdb,springdb,dotnetdb,nodedb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./databases/postgresql/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
      - ./databases/postgresql/seed-data.sql:/docker-entrypoint-initdb.d/seed-data.sql
    networks:
      - csb-test-network

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: drupal
      MYSQL_USER: drupal
      MYSQL_PASSWORD: drupal
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./databases/mysql/schemas:/docker-entrypoint-initdb.d
    networks:
      - csb-test-network

  oracle:
    image: container-registry.oracle.com/database/express:21.3.0-xe
    environment:
      ORACLE_PWD: oracle_password_123
      ORACLE_CHARACTERSET: AL32UTF8
    ports:
      - "1521:1521"
    volumes:
      - oracle_data:/opt/oracle/oradata
      - ./databases/oracle/schemas:/docker-entrypoint-initdb.d
    networks:
      - csb-test-network

  # Security Scanning Tools
  semgrep:
    image: semgrep/semgrep:latest
    working_dir: /src
    volumes:
      - .:/src:ro  # Mount source code as read-only
      - ./security-reports:/reports  # Output directory
    command: >
      sh -c "
        echo 'üîç Running Semgrep security scans...' &&
        mkdir -p /reports/semgrep &&
        semgrep --config=p/security-audit --config=p/secrets --config=p/php --config=p/javascript --config=p/typescript --config=p/python --config=p/java --config=p/csharp --config=.semgrep/csb-custom-rules.yml --config=.semgrep/java-rules.yml --config=.semgrep/typescript-rules.yml --config=.semgrep/dataweave-rules.yml --config=.semgrep/drupal-rules.yml --sarif --output=/reports/semgrep/comprehensive-scan.sarif /src &&
        semgrep --config=p/security-audit --config=p/secrets --config=.semgrep/ --json --output=/reports/semgrep/comprehensive-scan.json /src &&
        echo '‚úÖ Semgrep scan complete - results in security-reports/semgrep/'
      "
    environment:
      - SEMGREP_APP_TOKEN=${SEMGREP_APP_TOKEN:-}
    networks:
      - csb-test-network
    profiles:
      - security
      - all

  trufflehog:
    image: trufflesecurity/trufflehog:latest
    working_dir: /src
    volumes:
      - .:/src:ro  # Mount source code as read-only
      - ./security-reports:/reports  # Output directory
    command: >
      sh -c "
        echo 'üîê Running TruffleHog secret detection...' &&
        mkdir -p /reports/trufflehog &&
        trufflehog git file:///src --only-verified --json > /reports/trufflehog/secrets-verified.json &&
        trufflehog git file:///src --json > /reports/trufflehog/secrets-all.json &&
        echo '‚úÖ TruffleHog scan complete - results in security-reports/trufflehog/'
      "
    networks:
      - csb-test-network
    profiles:
      - security
      - all

  # OWASP ZAP for Dynamic Application Security Testing
  zap:
    image: ghcr.io/zaproxy/zaproxy:stable
    working_dir: /zap/wrk
    volumes:
      - ./security-reports/zap:/zap/wrk  # Output directory
    command: >
      sh -c "
        echo 'üï∑Ô∏è Running OWASP ZAP baseline scan...' &&
        zap-baseline.py -t http://spring-boot-api:8080 -r zap-baseline-report.html -J zap-baseline-report.json &&
        zap-baseline.py -t http://flask-api:5000 -r zap-flask-report.html -J zap-flask-report.json &&
        zap-baseline.py -t http://django-app:8000 -r zap-django-report.html -J zap-django-report.json &&
        echo '‚úÖ ZAP scans complete - results in security-reports/zap/'
      "
    networks:
      - csb-test-network
    depends_on:
      - spring-boot-api
      - flask-api
      - django-app
    profiles:
      - security
      - all

  # Trivy for Container and Dependency Scanning
  trivy:
    image: aquasec/trivy:latest
    volumes:
      - .:/src:ro  # Mount source code as read-only
      - ./security-reports/trivy:/output  # Output directory
    command: fs --format json --output /output/filesystem-scan.json /src
    networks:
      - csb-test-network
    profiles:
      - security
      - all

  # Trivy SARIF format (separate run)
  trivy-sarif:
    image: aquasec/trivy:latest
    volumes:
      - .:/src:ro  # Mount source code as read-only
      - ./security-reports/trivy:/output  # Output directory
    command: fs --format sarif --output /output/filesystem-scan.sarif /src
    networks:
      - csb-test-network
    profiles:
      - security
      - all

  # Snyk for Dependency Scanning (requires token)
  snyk:
    image: snyk/snyk:node
    working_dir: /src
    volumes:
      - .:/src:ro  # Mount source code as read-only
      - ./security-reports:/reports  # Output directory
    command: >
      sh -c "
        echo 'üì¶ Running Snyk dependency scans...' &&
        mkdir -p /reports/snyk &&
        if [ -n \"$$SNYK_TOKEN\" ]; then
          snyk test --all-projects --json > /reports/snyk/dependencies-scan.json || true &&
          echo '‚úÖ Snyk scan complete - results in security-reports/snyk/' ;
        else
          echo '‚ö†Ô∏è SNYK_TOKEN not set - skipping Snyk scan' ;
        fi
      "
    environment:
      - SNYK_TOKEN=${SNYK_TOKEN:-}
    networks:
      - csb-test-network
    profiles:
      - security
      - all

  # Development Tools
  adminer:
    image: adminer
    ports:
      - "8081:8080"
    networks:
      - csb-test-network
    depends_on:
      - postgres
      - mysql

  # Security Dashboard (simple web server to view reports)
  security-dashboard:
    image: nginx:alpine
    ports:
      - "9000:80"
    volumes:
      - ./security-reports:/usr/share/nginx/html:ro
      - ./security/dashboard/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - csb-test-network
    profiles:
      - security
      - all

volumes:
  postgres_data:
  mysql_data:
  oracle_data:

networks:
  csb-test-network:
    driver: bridge