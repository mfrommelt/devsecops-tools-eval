networks:
  csb-test-network:
    driver: bridge

volumes:
  postgres_data:
  mysql_data:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:

services:
  # Frontend Applications
  react-app:
    build: 
      context: ./frontend/react-app
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8080/api
    networks:
      - csb-test-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "5", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  angular-app:
    build:
      context: ./frontend/angular-app
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    environment:
      - NODE_ENV=development
    networks:
      - csb-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "5", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Backend Applications
  django-app:
    build:
      context: ./backend/python-django
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=csb_project.settings
      - DATABASE_URL=postgresql://postgres:hardcoded_spring_db_password_789@postgres:5432/csbdb
    networks:
      - csb-test-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "5", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  flask-api:
    build: 
      context: ./backend/python-flask
      dockerfile: Dockerfile
    container_name: flask-security-api
    ports:
      - "5000:5000"
    environment:
      - FLASK_DEBUG=true
      - FLASK_APP=app.py
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - csb-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "5", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  spring-boot-api:
    build:
      context: ./backend/java-springboot
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=development
      - DATABASE_URL=jdbc:postgresql://postgres:5432/springdb
    networks:
      - csb-test-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "10", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s

  dotnet-api:
    build:
      context: ./backend/csharp-webapi
      dockerfile: Dockerfile
    ports:
      - "8090:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=dotnetdb;Username=postgres;Password=hardcoded_spring_db_password_789
    networks:
      - csb-test-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "5", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  node-express:
    build:
      context: ./backend/node-express
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:hardcoded_spring_db_password_789@postgres:5432/nodedb
    networks:
      - csb-test-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "5", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  php-drupal:
    build:
      context: ./backend/php-drupal
      dockerfile: Dockerfile
    ports:
      - "8888:80"
    environment:
      - DRUPAL_ENV=development
      - MYSQL_HOST=mysql
      - MYSQL_DATABASE=drupal
      - MYSQL_USER=drupal
      - MYSQL_PASSWORD=drupal
    networks:
      - csb-test-network
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "5", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Databases
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: hardcoded_spring_db_password_789
      POSTGRES_MULTIPLE_DATABASES: csbdb,flaskdb,springdb,dotnetdb,nodedb,sonarqube
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./databases/postgresql/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
    networks:
      - csb-test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: drupal
      MYSQL_USER: drupal
      MYSQL_PASSWORD: drupal
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - csb-test-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Support Services
  adminer:
    image: adminer:4.8.1
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - csb-test-network
    depends_on:
      - postgres
      - mysql
    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "5", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Security Dashboard
  security-dashboard:
    image: nginx:alpine
    ports:
      - "9000:80"
    volumes:
      - ./security-dashboard:/usr/share/nginx/html:ro
      - ./security-reports:/usr/share/nginx/html/reports:ro
    networks:
      - csb-test-network
    profiles:
      - security
      - all
    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "5", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SonarQube Community Edition  
  sonarqube:
    image: sonarqube:10.7.0-community
    container_name: csb-sonarqube
    ports:
      - "9001:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube
      - SONAR_JDBC_USERNAME=postgres
      - SONAR_JDBC_PASSWORD=hardcoded_spring_db_password_789
      - SONAR_WEB_JAVAADDITIONALOPTS=-Xmx512m -Xms128m
      - SONAR_CE_JAVAADDITIONALOPTS=-Xmx512m -Xms128m
    networks:
      - csb-test-network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    profiles:
      - security
      - all
    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "10", "http://localhost:9000/api/system/status"]
      interval: 60s
      timeout: 20s
      retries: 10
      start_period: 300s

  # Security Tools (Containerized)
  semgrep:
    image: semgrep/semgrep
    volumes:
      - .:/src:ro
      - ./security-reports:/reports
    command: >
      sh -c "
        semgrep --config=p/security-audit --config=p/secrets --json --output=/reports/semgrep-scan.json /src &&
        semgrep --config=p/security-audit --config=p/secrets --sarif --output=/reports/semgrep-scan.sarif /src
      "
    profiles:
      - security
      - all

  trivy:
    image: aquasec/trivy
    volumes:
      - .:/src:ro
      - ./security-reports:/reports
    command: >
      sh -c "
        trivy fs --format json --output /reports/trivy-filesystem.json /src &&
        trivy config --format json --output /reports/trivy-config.json /src
      "
    profiles:
      - security
      - all

  trufflehog:
    image: trufflesecurity/trufflehog
    volumes:
      - .:/src:ro
      - ./security-reports:/reports
    command: >
      sh -c "
        trufflehog git file:///src --only-verified --json > /reports/trufflehog-secrets.json
      "
    profiles:
      - security
      - all

  zap:
    image: ghcr.io/zaproxy/zaproxy:stable
    command: >
      sh -c "
        sleep 60 &&
        zap-baseline.py -t http://php-drupal/ -J /zap/wrk/zap-drupal.json &&
        zap-baseline.py -t http://spring-boot-api:8080/ -J /zap/wrk/zap-spring.json &&
        zap-baseline.py -t http://dotnet-api/ -J /zap/wrk/zap-dotnet.json
      "
    volumes:
      - ./security-reports:/zap/wrk
    networks:
      - csb-test-network
    depends_on:
      - php-drupal
      - spring-boot-api
      - dotnet-api
    profiles:
      - security
      - all